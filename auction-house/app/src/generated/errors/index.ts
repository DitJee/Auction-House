/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * NotMutableAccount: 'The account is not mutable'
 *
 * @category Errors
 * @category generated
 */
export class NotMutableAccountError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'NotMutableAccount'
  constructor() {
    super('The account is not mutable')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, NotMutableAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new NotMutableAccountError())
createErrorFromNameLookup.set(
  'NotMutableAccount',
  () => new NotMutableAccountError()
)

/**
 * BumpSeedNotInHashMap: 'Bump seed not in hash map.'
 *
 * @category Errors
 * @category generated
 */
export class BumpSeedNotInHashMapError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'BumpSeedNotInHashMap'
  constructor() {
    super('Bump seed not in hash map.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, BumpSeedNotInHashMapError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new BumpSeedNotInHashMapError())
createErrorFromNameLookup.set(
  'BumpSeedNotInHashMap',
  () => new BumpSeedNotInHashMapError()
)

/**
 * PublicKeyMismatch: 'Public keys are not matched'
 *
 * @category Errors
 * @category generated
 */
export class PublicKeyMismatchError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'PublicKeyMismatch'
  constructor() {
    super('Public keys are not matched')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, PublicKeyMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new PublicKeyMismatchError())
createErrorFromNameLookup.set(
  'PublicKeyMismatch',
  () => new PublicKeyMismatchError()
)

/**
 * IncorrectOwner: 'The given account is not an owner'
 *
 * @category Errors
 * @category generated
 */
export class IncorrectOwnerError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'IncorrectOwner'
  constructor() {
    super('The given account is not an owner')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, IncorrectOwnerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1773, () => new IncorrectOwnerError())
createErrorFromNameLookup.set('IncorrectOwner', () => new IncorrectOwnerError())

/**
 * UninitializedAccount: 'Cannot initialized the account'
 *
 * @category Errors
 * @category generated
 */
export class UninitializedAccountError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'UninitializedAccount'
  constructor() {
    super('Cannot initialized the account')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UninitializedAccountError)
    }
  }
}

createErrorFromCodeLookup.set(0x1774, () => new UninitializedAccountError())
createErrorFromNameLookup.set(
  'UninitializedAccount',
  () => new UninitializedAccountError()
)

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
